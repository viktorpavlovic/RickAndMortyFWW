{"ast":null,"code":"var _jsxFileName = \"/home/marko/Desktop/RickAndMortyFWW/src/Pages/FavoritesPage/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from \"react\";\nimport Header from \"../../Components/Header\";\nimport Footer from \"../../Components/Footer\";\nimport EditModal from \"../../Components/EditModal\";\nimport { Button } from \"antd\";\nimport can from \"../../Assets/garbage-can.svg\";\nimport { UserContext } from \"../../Context/UserContext\";\nimport \"./favorites-page.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FavoritesPage = () => {\n  _s();\n  const [modal, setModal] = useState(false);\n  const [clickedChar, setClickedChar] = useState(null);\n  const handleOpen = char => {\n    setClickedChar(char);\n    setModal(true);\n  };\n  const handleClose = () => {\n    setModal(false);\n  };\n  const userContext = useContext(UserContext);\n  const favorites = userContext === null || userContext === void 0 ? void 0 : userContext.favorites;\n  const handleRemoveFavorite = index => {\n    const updatedFavorites = favorites.filter((_, i) => i !== index);\n    userContext === null || userContext === void 0 ? void 0 : userContext.setFavorites(updatedFavorites);\n    localStorage.setItem(\"favorites\", JSON.stringify(updatedFavorites));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      content: \"Logout\",\n      home: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"div-favorites-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your Favorites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), favorites === null || favorites === void 0 ? void 0 : favorites.map((char, i) => /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: char.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: char.species\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: char.image,\n          alt: \"\",\n          className: \"image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"middle\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: can,\n            alt: \"\",\n            className: \"can\",\n            onClick: () => handleRemoveFavorite(i)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          onClick: () => handleOpen(char),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)), modal && /*#__PURE__*/_jsxDEV(EditModal, {\n        handleClose: handleClose,\n        clickedChar: clickedChar,\n        favorites: favorites\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(FavoritesPage, \"cym0OdISj9UUYzCi9+LqCfq9rvA=\");\n_c = FavoritesPage;\nexport default FavoritesPage;\n\n// import React, { useState } from \"react\";\n// import \"./edit-modal.scss\";\n// import { Button, Form, Input } from \"antd\";\n\n// type FieldType = {\n//   name?: string;\n//   species?: string;\n// };\n// interface EditModalProps {\n//   handleClose: () => void;\n//   clickedChar: FieldType | null;\n//   updateFavorites: (updatedChar: FieldType) => void;\n// }\n\n// const EditModal: React.FC<EditModalProps> = ({\n//   handleClose,\n//   clickedChar,\n//   updateFavorites,\n// }) => {\n//   const [editedCharacter, setEditedCharacter] = useState<FieldType | null>(\n//     clickedChar\n//   );\n\n//   const handleOverlayClick = (event: { target: any; currentTarget: any }) => {\n//     if (event.target === event.currentTarget) {\n//       handleClose();\n//     }\n//   };\n\n//   const handleInputChange = (field: keyof FieldType, value: string) => {\n//     setEditedCharacter((prevCharacter) => ({\n//       ...prevCharacter,\n//       [field]: value,\n//     }));\n//   };\n\n//   const handleFormSubmit = () => {\n//     if (editedCharacter) {\n//       updateFavorites(editedCharacter);\n//       handleClose();\n//     }\n//   };\n\n//   return (\n//     <div className=\"edit-modal\" onClick={handleOverlayClick}>\n//       <Form\n//         name=\"basic\"\n//         labelCol={{ span: 8 }}\n//         wrapperCol={{ span: 16 }}\n//         style={{ maxWidth: 600 }}\n//         initialValues={{ ...clickedChar }}\n//         autoComplete=\"off\"\n//       >\n//         <span className=\"close-modal\" onClick={handleClose}>\n//           X\n//         </span>\n//         <Form.Item<FieldType>\n//           label=\"Name\"\n//           name=\"name\"\n//           rules={[{ required: true, message: \"Edit character name\" }]}\n//         >\n//           <Input\n//             value={editedCharacter?.name}\n//             onChange={(e) => handleInputChange(\"name\", e.target.value)}\n//           />\n//         </Form.Item>\n\n//         <Form.Item<FieldType>\n//           label=\"Species\"\n//           name=\"species\"\n//           rules={[{ required: true, message: \"Edit character species\" }]}\n//         >\n//           <Input\n//             value={editedCharacter?.species}\n//             onChange={(e) => handleInputChange(\"species\", e.target.value)}\n//           />\n//         </Form.Item>\n\n//         <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n//           <Button type=\"primary\" onClick={handleFormSubmit}>\n//             Submit\n//           </Button>\n//         </Form.Item>\n//       </Form>\n//     </div>\n//   );\n// };\n\n// export default EditModal;\nvar _c;\n$RefreshReg$(_c, \"FavoritesPage\");","map":{"version":3,"names":["React","useContext","useState","Header","Footer","EditModal","Button","can","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","FavoritesPage","_s","modal","setModal","clickedChar","setClickedChar","handleOpen","char","handleClose","userContext","favorites","handleRemoveFavorite","index","updatedFavorites","filter","_","i","setFavorites","localStorage","setItem","JSON","stringify","children","content","home","fileName","_jsxFileName","lineNumber","columnNumber","className","map","name","species","src","image","alt","onClick","type","_c","$RefreshReg$"],"sources":["/home/marko/Desktop/RickAndMortyFWW/src/Pages/FavoritesPage/index.tsx"],"sourcesContent":["import React, { useContext, useState } from \"react\";\nimport Header from \"../../Components/Header\";\nimport Footer from \"../../Components/Footer\";\nimport EditModal from \"../../Components/EditModal\";\nimport { Button } from \"antd\";\nimport can from \"../../Assets/garbage-can.svg\";\nimport { UserContext } from \"../../Context/UserContext\";\nimport \"./favorites-page.scss\";\ninterface FavoriteCharacter {\n  name: string;\n  image: string;\n  species: string;\n}\nconst FavoritesPage = () => {\n  const [modal, setModal] = useState(false);\n  const [clickedChar, setClickedChar] = useState<FavoriteCharacter | null>(\n    null\n  );\n  const handleOpen = (char: FavoriteCharacter) => {\n    setClickedChar(char);\n    setModal(true);\n  };\n  const handleClose = () => {\n    setModal(false);\n  };\n  const userContext = useContext(UserContext);\n  const favorites = userContext?.favorites;\n  const handleRemoveFavorite = (index: number) => {\n    const updatedFavorites = favorites.filter((_, i) => i !== index);\n    userContext?.setFavorites(updatedFavorites);\n    localStorage.setItem(\"favorites\", JSON.stringify(updatedFavorites));\n  };\n\n  return (\n    <>\n      <Header content=\"Logout\" home=\"Home\" />\n      <div className=\"div-favorites-page\">\n        <h1>Your Favorites</h1>\n\n        {favorites?.map((char, i) => (\n          <section key={i}>\n            <h3>{char.name}</h3>\n            <p>{char.species}</p>\n            <img src={char.image} alt=\"\" className=\"image\" />\n            <div className=\"middle\">\n              <img\n                src={can}\n                alt=\"\"\n                className=\"can\"\n                onClick={() => handleRemoveFavorite(i)}\n              />\n            </div>\n            <Button type=\"primary\" onClick={() => handleOpen(char)}>\n              Edit\n            </Button>\n          </section>\n        ))}\n        {modal && (\n          <EditModal\n            handleClose={handleClose}\n            clickedChar={clickedChar}\n            favorites={favorites}\n          />\n        )}\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default FavoritesPage;\n\n// import React, { useState } from \"react\";\n// import \"./edit-modal.scss\";\n// import { Button, Form, Input } from \"antd\";\n\n// type FieldType = {\n//   name?: string;\n//   species?: string;\n// };\n// interface EditModalProps {\n//   handleClose: () => void;\n//   clickedChar: FieldType | null;\n//   updateFavorites: (updatedChar: FieldType) => void;\n// }\n\n// const EditModal: React.FC<EditModalProps> = ({\n//   handleClose,\n//   clickedChar,\n//   updateFavorites,\n// }) => {\n//   const [editedCharacter, setEditedCharacter] = useState<FieldType | null>(\n//     clickedChar\n//   );\n\n//   const handleOverlayClick = (event: { target: any; currentTarget: any }) => {\n//     if (event.target === event.currentTarget) {\n//       handleClose();\n//     }\n//   };\n\n//   const handleInputChange = (field: keyof FieldType, value: string) => {\n//     setEditedCharacter((prevCharacter) => ({\n//       ...prevCharacter,\n//       [field]: value,\n//     }));\n//   };\n\n//   const handleFormSubmit = () => {\n//     if (editedCharacter) {\n//       updateFavorites(editedCharacter);\n//       handleClose();\n//     }\n//   };\n\n//   return (\n//     <div className=\"edit-modal\" onClick={handleOverlayClick}>\n//       <Form\n//         name=\"basic\"\n//         labelCol={{ span: 8 }}\n//         wrapperCol={{ span: 16 }}\n//         style={{ maxWidth: 600 }}\n//         initialValues={{ ...clickedChar }}\n//         autoComplete=\"off\"\n//       >\n//         <span className=\"close-modal\" onClick={handleClose}>\n//           X\n//         </span>\n//         <Form.Item<FieldType>\n//           label=\"Name\"\n//           name=\"name\"\n//           rules={[{ required: true, message: \"Edit character name\" }]}\n//         >\n//           <Input\n//             value={editedCharacter?.name}\n//             onChange={(e) => handleInputChange(\"name\", e.target.value)}\n//           />\n//         </Form.Item>\n\n//         <Form.Item<FieldType>\n//           label=\"Species\"\n//           name=\"species\"\n//           rules={[{ required: true, message: \"Edit character species\" }]}\n//         >\n//           <Input\n//             value={editedCharacter?.species}\n//             onChange={(e) => handleInputChange(\"species\", e.target.value)}\n//           />\n//         </Form.Item>\n\n//         <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n//           <Button type=\"primary\" onClick={handleFormSubmit}>\n//             Submit\n//           </Button>\n//         </Form.Item>\n//       </Form>\n//     </div>\n//   );\n// };\n\n// export default EditModal;\n"],"mappings":"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AW,EAAEA,WAAY;QACzBJ,WAAW,EAAEA,WAAY;QACzBM,SAAS,EAAEA;MAAU;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACN/B,OAAA,CAACN,MAAM;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACV,CAAC;AAEP,CAAC;AAAC3B,EAAA,CAvDID,aAAa;AAAAsC,EAAA,GAAbtC,aAAa;AAyDnB,eAAeA,aAAa;;AAE5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}